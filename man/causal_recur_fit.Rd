% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_causal_recur.R
\docType{class}
\name{causal_recur_fit}
\alias{causal_recur_fit}
\alias{fit_causal_recur}
\alias{print.causal_recur_fit}
\alias{summary.causal_recur_fit}
\alias{plot.causal_recur_fit}
\title{Fit Bayesian Causal Recurrent and Terminal‑Event Model}
\usage{
fit_causal_recur(
  data,
  K,
  id_col,
  time_col,
  treat_col,
  x_cols = NULL,
  formula_T,
  formula_Y,
  prior,
  num_chains = 4,
  iter = 2000,
  stan_model_file = NULL,
  compiled_model_cache = NULL,
  control = list(adapt_delta = 0.95, max_treedepth = 15),
  verbose = TRUE
)

\method{print}{causal_recur_fit}(x, ...)

\method{summary}{causal_recur_fit}(
  object,
  pars_to_report = c("beta1", "theta1", "theta_lag", "betaL[1]", "thetaL[1]"),
  ...
)

\method{plot}{causal_recur_fit}(x, ...)
}
\arguments{
\item{data}{A \strong{long‑format} \code{data.frame} that contains the user‑named
identifier, time index, treatment, outcome, and any covariate columns.
These names are supplied via \code{id_col}, \code{time_col}, \code{treat_col}, plus the
left‑hand sides of \code{formula_T} and \code{formula_Y}.}

\item{K}{Integer. Total number of discrete intervals in the study.}

\item{id_col}{Character scalar. Column name holding the \strong{subject ID}.}

\item{time_col}{Character scalar. Column name holding the \strong{discrete time
index} (\verb{1,...,K}).}

\item{treat_col}{Character scalar. Column name holding the \strong{treatment
indicator} (\code{0/1}).}

\item{x_cols}{Character vector of additional (static or time‑varying)
covariate names to keep; \code{NULL} if none.}

\item{formula_T}{A formula for the terminal‑event (death) sub‑model, e.g.
\code{death_flag ~ Y_prev + A + k_idx}.}

\item{formula_Y}{A formula for the recurrent‑count sub‑model, e.g.
\code{event_count ~ Y_prev + A + k_idx}.}

\item{prior}{Named list of gAR(1) hyperparameters with elements
\code{eta_beta}, \code{sigma_beta}, \code{rho_beta}, \code{eta_gamma}, \code{sigma_gamma},
\code{rho_gamma}.}

\item{num_chains}{Integer. Number of MCMC chains (default \code{4}).}

\item{iter}{Integer. Total iterations \emph{per} chain including warm‑up
(default \code{2000}).}

\item{stan_model_file}{Optional path to a pre‑compiled Stan model.
If \code{NULL}, the package‑internal teacher‑style model is used.}

\item{control}{List passed to Stan sampling (see \strong{rstan} docs).}

\item{verbose}{Logical. Print progress messages (default \code{TRUE}).}

\item{x}{an object used to select a method.}

\item{...}{further arguments passed to or from other methods.}
}
\value{
An object of class \code{causal_recur_fit} (list) with elements
\code{stan_fit}, \code{data_preprocessed}, \code{n_pat}, \code{K}, \code{design_info}, \code{prior}, and
\code{stan_data_list}.
}
\description{
Fits a discrete‑time Bayesian model for recurrent event counts and a terminal
event (death) using gAR(1) smoothing priors on the time‑varying intercepts.
}
\details{
Internally the function
\enumerate{
\item Copies \code{id_col}, \code{time_col}, and \code{treat_col} into the canonical names
\code{pat_id}, \code{k_idx}, and \code{A}, and copies the outcomes named on the left‑hand
sides of \code{formula_T} / \code{formula_Y} into \code{T_obs} / \code{Y_obs};
\item Calls \code{\link[=preprocess_data]{preprocess_data()}} to fill missing intervals, create lagged
variables, and run basic checks;
\item Builds teacher‑style standata, compiles the Stan model, and runs MCMC
sampling via \strong{rstan}.
}
}
\section{Methods (by generic)}{
\itemize{
\item \code{print(causal_recur_fit)}: Print a brief summary

\item \code{summary(causal_recur_fit)}: Summarise posterior estimates

\item \code{plot(causal_recur_fit)}: Prompt user to run diagnostics

}}
\examples{
df <- data.frame(
  sid         = rep(1:2, each = 2),
  period      = rep(1:2, 2),
  event_count = rpois(4, 1),
  death_flag  = rbinom(4, 1, 0.2),
  trt_arm     = rbinom(4, 1, 0.5)
)
prior <- list(
  eta_beta  = 0, sigma_beta  = 1, rho_beta   = 0.5,
  eta_gamma = 0, sigma_gamma = 1, rho_gamma  = 0.5
)
\dontrun{
fit <- fit_causal_recur(
  data       = df, K = 2,
  id_col     = "sid",
  time_col   = "period",
  treat_col  = "trt_arm",
  formula_T  = death_flag  ~ Y_prev + A + k_idx,
  formula_Y  = event_count ~ Y_prev + A + k_idx,
  prior      = prior,
  num_chains = 1, iter = 100
)
print(fit)
summary(fit)
plot(fit)
}

}
