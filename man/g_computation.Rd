% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/g_computation.R
\name{g_computation}
\alias{g_computation}
\title{Bayesian g-Computation for Recurrent-Event Rate Contrasts}
\usage{
g_computation(fit_out, s_vec, B = 50)
}
\arguments{
\item{fit_out}{Output list from \code{fit_causal_recur()}, containing
at least \code{stan_fit}, \code{data_preprocessed}, \code{n_pat}, \code{K}.}

\item{s_vec}{Integer vector of treatment initiation intervals (from 1 to K).}

\item{B}{Integer. Number of Monte Carlo replicates per posterior draw (default: 50).}
}
\value{
A list with:
\describe{
\item{R_mat}{Matrix of dimension M Ã— (length(s_vec)+1), where M is the number of posterior draws.
Columns are mean rates under each treatment strategy.}
\item{delta}{Named list of length \code{length(s_vec)}, each an element list with
\code{draws}, \code{mean}, \code{CI_lower}, \code{CI_upper}.}
}
}
\description{
Perform Bayesian g-computation to estimate average recurrent-event rates
under different treatment initiation times versus never treating.
}
\details{
For each posterior draw:
\enumerate{
\item Sample Dirichlet weights for subjects.
\item Simulate B replicate paths of (T_k, Y_k) conditional on treatment at s.
\item Compute subject-level event rates and average with weights.
\item Compute contrasts \eqn{\Delta(s,K+1)=R(s)-R(K+1)}.
}
}
\examples{
\dontrun{
# Minimal reproducible workflow
df <- data.frame(
  patient_id = rep(1:2, each = 2),
  k_idx      = rep(1:2, 2),
  Y          = rpois(4, 1),
  T          = rbinom(4, 1, 0.2),
  C          = rbinom(4, 1, 0.05),
  A          = rbinom(4, 1, 0.5)
)
prior <- list(
  eta_beta    = 0, sigma_beta  = 1, rho_beta   = 0.5,
  eta_gamma   = 0, sigma_gamma = 1, rho_gamma  = 0.5
)
fit <- fit_causal_recur(
  data       = df,
  K          = 2,
  id_col     = "patient_id",
  k_col      = "k_idx",
  y_col      = "Y",
  t_col      = "T",
  c_col      = "C",
  a_col      = "A",
  x_cols     = NULL,
  formula_T  = T_obs ~ Y_prev + A + k_idx,
  formula_Y  = Y_obs ~ Y_prev + A + k_idx,
  prior      = prior,
  num_chains = 1,
  iter       = 100
)
gcomp <- g_computation(
  fit_out = fit,
  s_vec   = 1:2,
  B       = 10
)
print(gcomp)
}

}
